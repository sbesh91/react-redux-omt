{"version":3,"file":"index.esm.js","sources":["../src/main-thread-functions.ts","../src/worker-functions.ts"],"sourcesContent":["import { Signal, useSignal, useSignalEffect } from \"@preact/signals-react\";\nimport { Action } from \"redux\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport {\n  FunctionParameters,\n  SelectorFunction,\n  SelectorReturn,\n  WorkerSelector,\n} from \"./types\";\n\nlet worker: Worker | undefined;\nconst workerEvent = new Signal<SelectorReturn<unknown> | null>(null);\n\nfunction initializeWorkerStoreListener(w: Worker) {\n  worker = w;\n\n  w.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<SelectorReturn<unknown>>) => {\n      workerEvent.value = data;\n    }\n  );\n}\n\nfunction dispatch(action: Action) {\n  worker?.postMessage({ type: \"dispatch\", action });\n}\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params: FunctionParameters<Fn>,\n  defaultValue: Return\n): Signal<Return>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params?: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params?: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined> {\n  const currentUuid = useSignal(\"\");\n  const state = useSignal(defaultValue);\n\n  useSignalEffect(() => {\n    const data = workerEvent.value;\n    if (data && data.uuid === currentUuid.peek()) {\n      state.value = data.value as Return;\n    }\n  });\n\n  useDeepCompareEffect(() => {\n    const uuid = crypto.randomUUID();\n    currentUuid.value = uuid;\n\n    worker?.postMessage({\n      type: \"subscribe\",\n      uuid,\n      selector: { selector: selector.name, params },\n    });\n\n    return () => {\n      worker?.postMessage({ type: \"unsubscribe\", uuid });\n    };\n  }, [selector, params]);\n\n  return state;\n}\n\nexport { useWorkerSelector, initializeWorkerStoreListener, dispatch };\n","import { ToolkitStore } from \"@reduxjs/toolkit/dist/configureStore\";\nimport {\n  BaseSelector,\n  MessageType,\n  RootState,\n  SelectorFunction,\n  WorkerSelector,\n} from \"./types\";\n\nlet selectors: Record<string, WorkerSelector<SelectorFunction>> | undefined;\n\nconst listeners = new Map<string, BaseSelector>();\n\nfunction initializeWorkerStore(\n  store: ToolkitStore<RootState>,\n  s: Record<string, WorkerSelector<SelectorFunction>>\n) {\n  selectors = s;\n\n  addEventListener(\"message\", ({ data }: MessageEvent<MessageType>) => {\n    switch (data.type) {\n      case \"dispatch\":\n        store.dispatch(data.action);\n        break;\n      case \"subscribe\":\n        listeners.set(data.uuid, data.selector);\n        runSelector(data.selector, data.uuid);\n        break;\n      case \"unsubscribe\":\n        listeners.delete(data.uuid);\n        break;\n    }\n  });\n\n  store.subscribe(() => {\n    listeners.forEach(runSelector);\n  });\n\n  function runSelector(value: BaseSelector, key: string) {\n    const selector: SelectorFunction<unknown> | undefined =\n      selectors?.[value.selector]?.fn;\n    const params = value.params ?? [];\n    if (selector) {\n      const returnValue = selector(store.getState(), ...params);\n\n      postMessage({\n        uuid: key,\n        value: returnValue,\n      });\n    }\n  }\n}\n\nfunction createWorkerSelector<T>(name: string, selector: T): WorkerSelector<T> {\n  return {\n    name,\n    fn: selector,\n  };\n}\n\nexport { initializeWorkerStore, createWorkerSelector };\n"],"names":["worker","selectors","workerEvent","Signal","w","addEventListener","_ref","value","data","dispatch","action","_worker","postMessage","type","useWorkerSelector","selector","params","defaultValue","currentUuid","useSignal","useSignalEffect","uuid","peek","state","useDeepCompareEffect","_worker2","crypto","randomUUID","name","_worker3","listeners","Map","initializeWorkerStore","store","s","key","_selectors$value$sele","_selectors","fn","_value$params","returnValue","getState","set","runSelector","subscribe","forEach","createWorkerSelector"],"mappings":"0HAUA,IAAIA,ECDAC,EDEaC,EAAG,IAAUC,EAAiC,MAE/D,WAAuCC,GACrCJ,EAASI,EAETA,EAAEC,iBACA,UACA,SAAoDC,GAClDJ,EAAYK,MADPD,EAAJE,IAEH,EAEJ,CAEA,SAAiBC,EAACC,GAChB,IAAAC,EAAA,OAAAA,EAAAX,IAAAW,EAAQC,YAAY,CAAEC,KAAM,WAAYH,OAAAA,GAC1C,CA6BA,SAA0BI,EAIxBC,EACAC,EACAC,GAEA,IAAMC,EAAcC,EAAU,MAChBA,EAAUF,GAwBxB,OAtBAG,EAAgB,WACd,IAAMZ,EAAON,EAAYK,MACrBC,GAAQA,EAAKa,OAASH,EAAYI,SACpCC,EAAMhB,MAAQC,EAAKD,MAEvB,GAEAiB,EAAqB,WAAK,IAAAC,EAClBJ,EAAOK,OAAOC,aASpB,OARAT,EAAYX,MAAQc,EAEpB,OAAArB,EAAAA,IAAAyB,EAAQb,YAAY,CAClBC,KAAM,YACNQ,KAAAA,EACAN,SAAU,CAAEA,SAAUA,EAASa,KAAMZ,OAAAA,KAGhC,WACL,IAAAa,EAAM,OAANA,EAAA7B,IAAA6B,EAAQjB,YAAY,CAAEC,KAAM,cAAeQ,KAAAA,GAC7C,CACF,EAAG,CAACN,EAAUC,IAEPO,CACT,CC9EA,IAAMO,EAAY,IAAIC,IAEtB,SAASC,EACPC,EACAC,GAuBA,WAAqB3B,EAAqB4B,aAClCpB,EACK,SAATd,IAA2B,OAAlBmC,EAATC,EAAY9B,EAAMQ,gBAAT,EAATqB,EAA6BE,GACnBtB,SAAAuB,EAAGhC,EAAMS,UAAU,GAC/B,GAAID,EAAU,CACZ,IAAiByB,EAAGzB,EAASkB,WAAAA,EAAAA,CAAAA,EAAMQ,mBAAezB,IAElDJ,YAAY,CACVS,KAAMc,EACN5B,MAAOiC,GAEV,CACH,CAjCAvC,EAAYiC,EAEZ7B,iBAAiB,UAAW,SAAAC,OAAOE,EAAAF,EAAJE,KAC7B,OAAQA,EAAKK,MACX,IAAK,WACHoB,EAAMxB,SAASD,EAAKE,QACpB,MACF,IAAK,YACHoB,EAAUY,IAAIlC,EAAKa,KAAMb,EAAKO,UAC9B4B,EAAYnC,EAAKO,SAAUP,EAAKa,MAChC,MACF,IAAK,cACHS,SAAiBtB,EAAKa,MAG5B,GAEAY,EAAMW,UAAU,WACdd,EAAUe,QAAQF,EACpB,EAeF,CAEA,SAASG,EAAwBlB,EAAcb,GAC7C,MAAO,CACLa,KAAAA,EACAU,GAAIvB,EAER"}