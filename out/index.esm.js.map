{"version":3,"file":"index.esm.js","sources":["../src/main-thread-functions.ts","../src/worker-functions.ts"],"sourcesContent":["import { Signal, useSignal, useSignalEffect } from \"@preact/signals-react\";\nimport { Action } from \"redux\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport {\n  FunctionParameters,\n  SelectorFunction,\n  SelectorReturn,\n  WorkerSelector,\n} from \"./types\";\n\nlet worker: Worker | undefined;\nconst workerEvent = new Signal<SelectorReturn<unknown> | null>(null);\n\nfunction initializeWorkerStoreListener(w: Worker) {\n  worker = w;\n\n  w.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<SelectorReturn<unknown>>) => {\n      workerEvent.value = data;\n    }\n  );\n}\n\nfunction dispatch(action: Action) {\n  worker?.postMessage({ type: \"dispatch\", action });\n}\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction<Parameters<Fn>[0], ReturnType<Fn>>,\n  Params extends FunctionParameters<Fn>,\n  Return extends ReturnType<Fn>,\n  RequiredParams extends [Params[0]] extends [undefined]\n    ? {}\n    : { params: Params },\n  Options extends { defaultValue?: Return } & RequiredParams\n>(selector: WorkerSelector<Fn>, options: Options): Signal<Return>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction<Parameters<Fn>[0], ReturnType<Fn>>,\n  Params extends FunctionParameters<Fn>,\n  Return extends ReturnType<Fn>,\n  RequiredParams extends [Params[0]] extends [undefined]\n    ? {}\n    : { params: Params },\n  Options extends { defaultValue?: Return } & RequiredParams\n>(selector: WorkerSelector<Fn>, options?: Options): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction<Parameters<Fn>[0], ReturnType<Fn>>,\n  Return extends ReturnType<Fn>,\n  Params extends FunctionParameters<Fn>,\n  RequiredParams extends [Params[0]] extends [undefined]\n    ? {}\n    : { params: Params },\n  Options extends { defaultValue?: Return } & RequiredParams\n>(selector: WorkerSelector<Fn>, options?: Options): Signal<Return | undefined> {\n  const defaultValue = options?.defaultValue;\n  const params = options && \"params\" in options ? options.params : [];\n  const currentUuid = useSignal(\"\");\n  const state = useSignal(defaultValue);\n\n  useSignalEffect(() => {\n    const data = workerEvent.value;\n    if (data && data.uuid === currentUuid.peek()) {\n      state.value = data.value as Return;\n    }\n  });\n\n  useDeepCompareEffect(() => {\n    const uuid = crypto.randomUUID();\n    currentUuid.value = uuid;\n\n    worker?.postMessage({\n      type: \"subscribe\",\n      uuid,\n      selector: { selector: selector.name, params },\n    });\n\n    return () => {\n      worker?.postMessage({ type: \"unsubscribe\", uuid });\n    };\n  }, [selector, params]);\n\n  return state;\n}\n\nexport {\n  workerEvent,\n  useWorkerSelector,\n  initializeWorkerStoreListener,\n  dispatch,\n};\n","import { ToolkitStore } from \"@reduxjs/toolkit/dist/configureStore\";\nimport {\n  SelectorReference,\n  MessageType,\n  SelectorFunction,\n  WorkerSelector,\n} from \"./types\";\n\nconst listeners = new Map<string, SelectorReference>();\n\nfunction initializeWorkerStore<T>(\n  store: ToolkitStore<T>,\n  selectors: Record<string, WorkerSelector<SelectorFunction<T>>>\n) {\n  addEventListener(\"message\", ({ data }: MessageEvent<MessageType>) => {\n    switch (data.type) {\n      case \"dispatch\":\n        store.dispatch(data.action);\n        break;\n      case \"subscribe\":\n        listeners.set(data.uuid, data.selector);\n        runSelector(data.selector, data.uuid);\n        break;\n      case \"unsubscribe\":\n        listeners.delete(data.uuid);\n        break;\n    }\n  });\n\n  store.subscribe(() => {\n    listeners.forEach(runSelector);\n  });\n\n  function runSelector(value: SelectorReference, key: string) {\n    const selector: SelectorFunction<T> | undefined =\n      selectors?.[value.selector]?.fn;\n    const params = value.params;\n\n    if (selector) {\n      const returnValue = selector(store.getState(), ...params);\n\n      postMessage({\n        uuid: key,\n        value: returnValue,\n      });\n    }\n  }\n}\n\nfunction createWorkerSelector<T extends SelectorFunction<Parameters<T>[0]>>(\n  name: string,\n  selector: T\n): WorkerSelector<T> {\n  return {\n    name,\n    fn: selector,\n  };\n}\n\nexport { initializeWorkerStore, createWorkerSelector };\n"],"names":["worker","workerEvent","Signal","initializeWorkerStoreListener","w","addEventListener","_ref","value","data","dispatch","action","_worker","postMessage","type","useWorkerSelector","selector","options","defaultValue","params","currentUuid","useSignal","state","useSignalEffect","uuid","peek","useDeepCompareEffect","_worker2","crypto","randomUUID","name","_worker3","store","selectors","runSelector","key","_selectors$value$sele","fn","returnValue","apply","getState","concat","listeners","set","subscribe","forEach","createWorkerSelector"],"mappings":"0HAUA,IAAIA,EACaC,EAAG,IAAIC,EAAuC,MAE/D,SAASC,EAA8BC,GACrCJ,EAASI,EAETA,EAAEC,iBACA,UACA,SAAoDC,GAClDL,EAAYM,MADPD,EAAJE,IAEH,EAEJ,CAEA,SAASC,EAASC,GAAc,IAAAC,EACxB,SAANX,IAAAW,EAAQC,YAAY,CAAEC,KAAM,WAAYH,OAAAA,GAC1C,CAsBA,SAASI,EAQPC,EAA8BC,GAC9B,IAAMC,EAAeD,MAAAA,OAAAA,EAAAA,EAASC,aAClBC,EAAGF,GAAW,WAAmBA,EAAGA,EAAQE,OAAS,GAC3DC,EAAcC,EAAU,IACxBC,EAAQD,EAAUH,GAwBxB,OAtBAK,EAAgB,WACd,IAAUd,EAAGP,EAAYM,MACrBC,GAAQA,EAAKe,OAASJ,EAAYK,SACpCH,EAAMd,MAAQC,EAAKD,MAEvB,GAEAkB,EAAqB,WAAK,IAAAC,EAClBH,EAAOI,OAAOC,aASpB,OARAT,EAAYZ,MAAQgB,EAEpB,OAAAvB,EAAAA,IAAA0B,EAAQd,YAAY,CAClBC,KAAM,YACNU,KAAAA,EACAR,SAAU,CAAEA,SAAUA,EAASc,KAAMX,OAAAA,KAG3B,WAAA,IAAAY,EACV,OAAA9B,EAAAA,IAAA8B,EAAQlB,YAAY,CAAEC,KAAM,cAAeU,KAAAA,GAC7C,CACF,EAAG,CAACR,EAAUG,IAEPG,CACT,CC7EA,MAAkB,QAElB,WACEU,EACAC,GAqBA,SAAoBC,EAAC1B,EAA0B2B,GAC7C,IAAAC,UACEH,GAAA,SAAAA,EAAYzB,EAAMQ,kBAAlBoB,EAA6BC,KAChB7B,EAAMW,OAErB,GAAIH,EAAU,CACZ,IAAMsB,EAActB,EAAQuB,WAAA,EAAA,CAACP,EAAMQ,YAAUC,OAAKtB,IAElDN,YAAY,CACVW,KAAMW,EACN3B,MAAO8B,GAEV,CACH,CAhCAhC,iBAAiB,UAAW,SAAAC,OAAOE,EAAAF,EAAJE,KAC7B,OAAQA,EAAKK,MACX,IAAK,WACHkB,EAAMtB,SAASD,EAAKE,QACpB,MACF,IAAK,YACH+B,EAAUC,IAAIlC,EAAKe,KAAMf,EAAKO,UAC9BkB,EAAYzB,EAAKO,SAAUP,EAAKe,MAChC,MACF,IAAK,cACHkB,EAAS,OAAQjC,EAAKe,MAG5B,GAEAQ,EAAMY,UAAU,WACdF,EAAUG,QAAQX,EACpB,EAgBF,CAEA,SAA6BY,EAC3BhB,EACAd,GAEA,MAAO,CACLc,KAAAA,EACAO,GAAIrB,EAER"}