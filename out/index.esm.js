import{Signal as e,useSignal as a,useSignalEffect as t}from"@preact/signals-react";import n from"use-deep-compare-effect";var u,s=new e(null);function r(e){u=e,e.addEventListener("message",function(e){s.value=e.data})}function i(e){var a;null==(a=u)||a.postMessage({type:"dispatch",action:e})}function c(e,r){var i=null==r?void 0:r.defaultValue,c=r&&"params"in r?r.params:[],o=a(""),l=a(i);return t(function(){var e=s.value;e&&e.uuid===o.peek()&&(l.value=e.value)}),n(function(){var a,t=crypto.randomUUID();return o.value=t,null==(a=u)||a.postMessage({type:"subscribe",uuid:t,selector:{selector:e.name,params:c}}),function(){var e;null==(e=u)||e.postMessage({type:"unsubscribe",uuid:t})}},[e,c]),l}var o=new Map;function l(e,a){function t(t,n){var u,s=null==a||null==(u=a[t.selector])?void 0:u.fn,r=t.params;if(s){var i=s.apply(void 0,[e.getState()].concat(r));postMessage({uuid:n,value:i})}}addEventListener("message",function(a){var n=a.data;switch(n.type){case"dispatch":e.dispatch(n.action);break;case"subscribe":o.set(n.uuid,n.selector),t(n.selector,n.uuid);break;case"unsubscribe":o.delete(n.uuid)}}),e.subscribe(function(){o.forEach(t)})}function p(e,a){return{name:e,fn:a}}export{p as createWorkerSelector,i as dispatch,l as initializeWorkerStore,r as initializeWorkerStoreListener,c as useWorkerSelector};
//# sourceMappingURL=index.esm.js.map
