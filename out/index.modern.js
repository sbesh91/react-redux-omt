import{Signal as e,useSignal as s,useSignalEffect as t}from"@preact/signals-react";import a from"use-deep-compare-effect";let n;const u=new e(null);function r(e){n=e,e.addEventListener("message",({data:e})=>{u.value=e})}function c(e){var s;null==(s=n)||s.postMessage({type:"dispatch",action:e})}function o(e,r){const c=null==r?void 0:r.defaultValue,o=r&&"params"in r?r.params:[],i=s(""),l=s(c);return t(()=>{const e=u.value;e&&e.uuid===i.peek()&&(l.value=e.value)}),a(()=>{var s;const t=crypto.randomUUID();return i.value=t,null==(s=n)||s.postMessage({type:"subscribe",uuid:t,selector:{selector:e.name,params:o}}),()=>{var e;null==(e=n)||e.postMessage({type:"unsubscribe",uuid:t})}},[e,o]),l}const i=new Map;function l(e,s){function t(t,a){var n;const u=null==s||null==(n=s[t.selector])?void 0:n.fn,r=t.params;if(u){const s=u(e.getState(),...r);postMessage({uuid:a,value:s})}}addEventListener("message",({data:s})=>{switch(s.type){case"dispatch":e.dispatch(s.action);break;case"subscribe":i.set(s.uuid,s.selector),t(s.selector,s.uuid);break;case"unsubscribe":i.delete(s.uuid)}}),e.subscribe(()=>{i.forEach(t)})}function p(e,s){return{name:e,fn:s}}export{p as createWorkerSelector,c as dispatch,l as initializeWorkerStore,r as initializeWorkerStoreListener,o as useWorkerSelector};
//# sourceMappingURL=index.modern.js.map
