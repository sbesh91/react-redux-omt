import{Signal as e,useSignal as t,useSignalEffect as s}from"@preact/signals-react";import a from"use-deep-compare-effect";let n;const u=new e(null);function c(e){n=e,e.addEventListener("message",({data:e})=>{u.value=e})}function r(e){var t;null==(t=n)||t.postMessage({type:"dispatch",action:e})}function o(e,c,r){const o=t(""),i=t(r);return s(()=>{const e=u.value;e&&e.uuid===o.peek()&&(i.value=e.value)}),a(()=>{var t;const s=crypto.randomUUID();return o.value=s,null==(t=n)||t.postMessage({type:"subscribe",uuid:s,selector:{selector:e.name,params:c}}),()=>{var e;null==(e=n)||e.postMessage({type:"unsubscribe",uuid:s})}},[e,c]),i}let i;const l=new Map;function p(e,t){function s(t,s){var a,n,u;const c=null==(a=i)||null==(n=a[t.selector])?void 0:n.fn,r=null!=(u=t.params)?u:[];if(c){const t=c(e.getState(),...r);postMessage({uuid:s,value:t})}}i=t,addEventListener("message",({data:t})=>{switch(t.type){case"dispatch":e.dispatch(t.action);break;case"subscribe":l.set(t.uuid,t.selector),s(t.selector,t.uuid);break;case"unsubscribe":l.delete(t.uuid)}}),e.subscribe(()=>{l.forEach(s)})}function d(e,t){return{name:e,fn:t}}export{d as createWorkerSelector,r as dispatch,p as initializeWorkerStore,c as initializeWorkerStoreListener,o as useWorkerSelector};
//# sourceMappingURL=index.modern.js.map
