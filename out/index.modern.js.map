{"version":3,"file":"index.modern.js","sources":["../src/main-thread-functions.ts","../src/worker-functions.ts"],"sourcesContent":["import { Signal, useSignal, useSignalEffect } from \"@preact/signals-react\";\nimport { Action } from \"redux\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport {\n  FunctionParameters,\n  SelectorFunction,\n  SelectorReturn,\n  WorkerSelector,\n} from \"./types\";\n\nlet worker: Worker | undefined;\nconst workerEvent = new Signal<SelectorReturn<unknown> | null>(null);\n\nfunction initializeWorkerStoreListener(w: Worker) {\n  worker = w;\n\n  w.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<SelectorReturn<unknown>>) => {\n      workerEvent.value = data;\n    }\n  );\n}\n\nfunction dispatch(action: Action) {\n  worker?.postMessage({ type: \"dispatch\", action });\n}\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction<Parameters<Fn>[0], ReturnType<Fn>>,\n  Params extends FunctionParameters<Fn>,\n  Return extends ReturnType<Fn>,\n  RequiredParams extends [Params[0]] extends [undefined]\n    ? {}\n    : { params: Params },\n  Options extends { defaultValue?: Return } & RequiredParams\n>(selector: WorkerSelector<Fn>, options: Options): Signal<Return>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction<Parameters<Fn>[0], ReturnType<Fn>>,\n  Params extends FunctionParameters<Fn>,\n  Return extends ReturnType<Fn>,\n  RequiredParams extends [Params[0]] extends [undefined]\n    ? {}\n    : { params: Params },\n  Options extends { defaultValue?: Return } & RequiredParams\n>(selector: WorkerSelector<Fn>, options?: Options): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction<Parameters<Fn>[0], ReturnType<Fn>>,\n  Return extends ReturnType<Fn>,\n  Params extends FunctionParameters<Fn>,\n  RequiredParams extends [Params[0]] extends [undefined]\n    ? {}\n    : { params: Params },\n  Options extends { defaultValue?: Return } & RequiredParams\n>(selector: WorkerSelector<Fn>, options?: Options): Signal<Return | undefined> {\n  const defaultValue = options?.defaultValue;\n  const params = options && \"params\" in options ? options.params : [];\n  const currentUuid = useSignal(\"\");\n  const state = useSignal(defaultValue);\n\n  useSignalEffect(() => {\n    const data = workerEvent.value;\n    if (data && data.uuid === currentUuid.peek()) {\n      state.value = data.value as Return;\n    }\n  });\n\n  useDeepCompareEffect(() => {\n    const uuid = crypto.randomUUID();\n    currentUuid.value = uuid;\n\n    worker?.postMessage({\n      type: \"subscribe\",\n      uuid,\n      selector: { selector: selector.name, params },\n    });\n\n    return () => {\n      worker?.postMessage({ type: \"unsubscribe\", uuid });\n    };\n  }, [selector, params]);\n\n  return state;\n}\n\nexport {\n  workerEvent,\n  useWorkerSelector,\n  initializeWorkerStoreListener,\n  dispatch,\n};\n","import { ToolkitStore } from \"@reduxjs/toolkit/dist/configureStore\";\nimport {\n  SelectorReference,\n  MessageType,\n  SelectorFunction,\n  WorkerSelector,\n} from \"./types\";\n\nconst listeners = new Map<string, SelectorReference>();\n\nfunction initializeWorkerStore<T>(\n  store: ToolkitStore<T>,\n  selectors: Record<string, WorkerSelector<SelectorFunction<T>>>\n) {\n  addEventListener(\"message\", ({ data }: MessageEvent<MessageType>) => {\n    switch (data.type) {\n      case \"dispatch\":\n        store.dispatch(data.action);\n        break;\n      case \"subscribe\":\n        listeners.set(data.uuid, data.selector);\n        runSelector(data.selector, data.uuid);\n        break;\n      case \"unsubscribe\":\n        listeners.delete(data.uuid);\n        break;\n    }\n  });\n\n  store.subscribe(() => {\n    listeners.forEach(runSelector);\n  });\n\n  function runSelector(value: SelectorReference, key: string) {\n    const selector: SelectorFunction<T> | undefined =\n      selectors?.[value.selector]?.fn;\n    const params = value.params;\n\n    if (selector) {\n      const returnValue = selector(store.getState(), ...params);\n\n      postMessage({\n        uuid: key,\n        value: returnValue,\n      });\n    }\n  }\n}\n\nfunction createWorkerSelector<T extends SelectorFunction<Parameters<T>[0]>>(\n  name: string,\n  selector: T\n): WorkerSelector<T> {\n  return {\n    name,\n    fn: selector,\n  };\n}\n\nexport { initializeWorkerStore, createWorkerSelector };\n"],"names":["worker","workerEvent","Signal","initializeWorkerStoreListener","w","addEventListener","data","value","dispatch","action","_worker","postMessage","type","useWorkerSelector","selector","options","defaultValue","params","currentUuid","useSignal","state","useSignalEffect","uuid","peek","useDeepCompareEffect","_worker2","crypto","randomUUID","name","_worker3","store","selectors","runSelector","key","_selectors$value$sele","fn","getState","returnValue","listeners","set","delete","subscribe","forEach"],"mappings":"0HAUA,IAA8BA,EAC9B,MAAMC,EAAc,IAAUC,EAAiC,MAE/D,SAAsCC,EAACC,GACrCJ,EAASI,EAETA,EAAEC,iBACA,UACA,EAAGC,WACDL,EAAYM,MAAQD,CAAAA,EAG1B,CAEA,SAASE,EAASC,GAChB,IAAAC,EAAM,OAANA,EAAAV,IAAAU,EAAQC,YAAY,CAAEC,KAAM,WAAYH,UAC1C,CAsBA,SAA0BI,EAQxBC,EAA8BC,GAC9B,MAAkBC,EAAU,MAAPD,OAAO,EAAPA,EAASC,aAClBC,EAAGF,GAAW,WAAmBA,EAAGA,EAAQE,OAAS,GAC3DC,EAAcC,EAAU,IACxBC,EAAQD,EAAUH,GAwBxB,OAtBAK,EAAgB,KACd,MAAUf,EAAGL,EAAYM,MACrBD,GAAQA,EAAKgB,OAASJ,EAAYK,SACpCH,EAAMb,MAAQD,EAAKC,MACpB,GAGHiB,EAAqB,KAAK,IAAAC,EACxB,MAAMH,EAAOI,OAAOC,aASpB,OARAT,EAAYX,MAAQe,EAEpB,OAAAtB,EAAAA,IAAAyB,EAAQd,YAAY,CAClBC,KAAM,YACNU,OACAR,SAAU,CAAEA,SAAUA,EAASc,KAAMX,YAGhC,KACL,IAAAY,EAAM,OAANA,EAAA7B,IAAA6B,EAAQlB,YAAY,CAAEC,KAAM,cAAeU,QAAM,CACnD,EACC,CAACR,EAAUG,IAEPG,CACT,CC7EA,QAAkB,QAElB,WACEU,EACAC,GAqBA,SAASC,EAAYzB,EAA0B0B,GAAW,IAAAC,EACxD,MAAcpB,EACZiB,MAAAA,GAA2B,OAA3BA,EAAAA,EAAYxB,EAAMO,gBAAlBiB,EAAAG,EAA6BC,GACnBlB,EAAGV,EAAMU,OAErB,GAAIH,EAAU,CACZ,QAAoBA,EAASgB,EAAMM,cAAenB,GAElDN,YAAY,CACVW,KAAMW,EACN1B,MAAO8B,GAEV,CACH,CAhCAhC,iBAAiB,UAAW,EAAGC,WAC7B,OAAQA,EAAKM,MACX,IAAK,WACHkB,EAAMtB,SAASF,EAAKG,QACpB,MACF,IAAK,YACH6B,EAAUC,IAAIjC,EAAKgB,KAAMhB,EAAKQ,UAC9BkB,EAAY1B,EAAKQ,SAAUR,EAAKgB,MAChC,MACF,IAAK,cACHgB,EAAUE,OAAOlC,EAAKgB,MAChB,GAIZQ,EAAMW,UAAU,KACdH,EAAUI,QAAQV,EAAW,EAiBjC,CAEA,WACEJ,EACAd,GAEA,MAAO,CACLc,OACAO,GAAIrB,EAER"}