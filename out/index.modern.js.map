{"version":3,"file":"index.modern.js","sources":["../src/main-thread-functions.ts","../src/worker-functions.ts"],"sourcesContent":["import { Signal, useSignal, useSignalEffect } from \"@preact/signals-react\";\nimport { Action } from \"redux\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport {\n  FunctionParameters,\n  SelectorFunction,\n  SelectorReturn,\n  WorkerSelector,\n} from \"./types\";\n\nlet worker: Worker | undefined;\nconst workerEvent = new Signal<SelectorReturn<unknown> | null>(null);\n\nfunction initializeWorkerStoreListener(w: Worker) {\n  worker = w;\n\n  w.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<SelectorReturn<unknown>>) => {\n      workerEvent.value = data;\n    }\n  );\n}\n\nfunction dispatch(action: Action) {\n  worker?.postMessage({ type: \"dispatch\", action });\n}\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params: FunctionParameters<Fn>,\n  defaultValue: Return\n): Signal<Return>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params?: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params?: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined> {\n  const currentUuid = useSignal(\"\");\n  const state = useSignal(defaultValue);\n\n  useSignalEffect(() => {\n    const data = workerEvent.value;\n    if (data && data.uuid === currentUuid.peek()) {\n      state.value = data.value as Return;\n    }\n  });\n\n  useDeepCompareEffect(() => {\n    const uuid = crypto.randomUUID();\n    currentUuid.value = uuid;\n\n    worker?.postMessage({\n      type: \"subscribe\",\n      uuid,\n      selector: { selector: selector.name, params },\n    });\n\n    return () => {\n      worker?.postMessage({ type: \"unsubscribe\", uuid });\n    };\n  }, [selector, params]);\n\n  return state;\n}\n\nexport { useWorkerSelector, initializeWorkerStoreListener, dispatch };\n","import { ToolkitStore } from \"@reduxjs/toolkit/dist/configureStore\";\nimport {\n  BaseSelector,\n  MessageType,\n  RootState,\n  SelectorFunction,\n  WorkerSelector,\n} from \"./types\";\n\nlet selectors: Record<string, WorkerSelector<SelectorFunction>> | undefined;\n\nconst listeners = new Map<string, BaseSelector>();\n\nfunction initializeWorkerStore(\n  store: ToolkitStore<RootState>,\n  s: Record<string, WorkerSelector<SelectorFunction>>\n) {\n  selectors = s;\n\n  addEventListener(\"message\", ({ data }: MessageEvent<MessageType>) => {\n    switch (data.type) {\n      case \"dispatch\":\n        store.dispatch(data.action);\n        break;\n      case \"subscribe\":\n        listeners.set(data.uuid, data.selector);\n        runSelector(data.selector, data.uuid);\n        break;\n      case \"unsubscribe\":\n        listeners.delete(data.uuid);\n        break;\n    }\n  });\n\n  store.subscribe(() => {\n    listeners.forEach(runSelector);\n  });\n\n  function runSelector(value: BaseSelector, key: string) {\n    const selector: SelectorFunction<unknown> | undefined =\n      selectors?.[value.selector]?.fn;\n    const params = value.params ?? [];\n    if (selector) {\n      const returnValue = selector(store.getState(), ...params);\n\n      postMessage({\n        uuid: key,\n        value: returnValue,\n      });\n    }\n  }\n}\n\nfunction createWorkerSelector<T>(name: string, selector: T): WorkerSelector<T> {\n  return {\n    name,\n    fn: selector,\n  };\n}\n\nexport { initializeWorkerStore, createWorkerSelector };\n"],"names":["worker","workerEvent","Signal","initializeWorkerStoreListener","w","addEventListener","data","value","action","_worker","postMessage","type","useWorkerSelector","selector","params","defaultValue","useSignal","state","useSignalEffect","uuid","currentUuid","peek","useDeepCompareEffect","_worker2","crypto","randomUUID","name","_worker3","selectors","listeners","Map","initializeWorkerStore","store","s","runSelector","key","_selectors","_selectors$value$sele","_value$params","fn","returnValue","getState","dispatch","set","delete","subscribe","forEach","createWorkerSelector"],"mappings":"0HAUA,IAA8BA,EAC9B,MAAMC,EAAc,IAAIC,EAAuC,MAE/D,SAAsCC,EAACC,GACrCJ,EAASI,EAETA,EAAEC,iBACA,UACA,EAAGC,WACDL,EAAYM,MAAQD,CACtB,EAEJ,CAEA,WAAkBE,GAChB,IAAAC,EAAM,OAANA,EAAAT,IAAAS,EAAQC,YAAY,CAAEC,KAAM,WAAYH,UAC1C,CA6BA,SAASI,EAIPC,EACAC,EACAC,GAEA,QAAoBC,EAAU,IACnBC,EAAGD,EAAUD,GAwBxB,OAtBAG,EAAgB,KACd,MAAMZ,EAAOL,EAAYM,MACrBD,GAAQA,EAAKa,OAASC,EAAYC,SACpCJ,EAAMV,MAAQD,EAAKC,MACpB,GAGHe,EAAqB,KACnB,IAAAC,EAAA,QAAaC,OAAOC,aASpB,OARAL,EAAYb,MAAQY,EAEpB,OAAAI,EAAAvB,IAAAuB,EAAQb,YAAY,CAClBC,KAAM,YACNQ,OACAN,SAAU,CAAEA,SAAUA,EAASa,KAAMZ,YAGhC,WACL,OAAAd,EAAAA,IAAA2B,EAAQjB,YAAY,CAAEC,KAAM,cAAeQ,QAC7C,CAAA,EACC,CAACN,EAAUC,IAGhBG,CAAA,CChFA,IAAIW,EAEJ,MAAMC,EAAY,IAAIC,IAEtB,SAASC,EACPC,EACAC,GAuBA,SAAoBC,EAAC3B,EAAqB4B,GACxC,IAAAC,EAAAC,EAAAC,EAAA,eACEV,EAAAA,aAAAQ,EAAY7B,EAAMM,kBAAlBwB,EAA6BE,GACzBzB,EAAyB,SAAhBP,EAAMO,QAAUwB,EAAA,GAC/B,GAAIzB,EAAU,CACZ,MAAM2B,EAAc3B,EAASmB,EAAMS,cAAe3B,GAElDJ,YAAY,CACVS,KAAMgB,EACN5B,MAAOiC,GAEV,CACH,CAjCAZ,EAAYK,EAEZ5B,iBAAiB,UAAW,EAAGC,WAC7B,OAAQA,EAAKK,MACX,IAAK,WACHqB,EAAMU,SAASpC,EAAKE,QACpB,MACF,IAAK,YACHqB,EAAUc,IAAIrC,EAAKa,KAAMb,EAAKO,UAC9BqB,EAAY5B,EAAKO,SAAUP,EAAKa,MAChC,MACF,IAAK,cACHU,EAAUe,OAAOtC,EAAKa,MAChB,GAIZa,EAAMa,UAAU,KACdhB,EAAUiB,QAAQZ,EAAW,EAgBjC,CAEA,SAA6Ba,EAAIrB,EAAcb,GAC7C,MAAO,CACLa,OACAa,GAAI1B,EAER"}