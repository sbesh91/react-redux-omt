{"version":3,"file":"index.cjs","sources":["../src/main-thread-functions.ts","../src/worker-functions.ts"],"sourcesContent":["import { Signal, useSignal, useSignalEffect } from \"@preact/signals-react\";\nimport { Action } from \"redux\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport {\n  FunctionParameters,\n  SelectorFunction,\n  SelectorReturn,\n  WorkerSelector,\n} from \"./types\";\n\nlet worker: Worker | undefined;\nconst workerEvent = new Signal<SelectorReturn<unknown> | null>(null);\n\nfunction initializeWorkerStoreListener(w: Worker) {\n  worker = w;\n\n  w.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<SelectorReturn<unknown>>) => {\n      workerEvent.value = data;\n    }\n  );\n}\n\nfunction dispatch(action: Action) {\n  worker?.postMessage({ type: \"dispatch\", action });\n}\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params: FunctionParameters<Fn>,\n  defaultValue: Return\n): Signal<Return>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params?: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined>;\n\nfunction useWorkerSelector<\n  Fn extends SelectorFunction,\n  Return extends ReturnType<Fn>\n>(\n  selector: WorkerSelector<Fn>,\n  params?: FunctionParameters<Fn>,\n  defaultValue?: Return\n): Signal<Return | undefined> {\n  const currentUuid = useSignal(\"\");\n  const state = useSignal(defaultValue);\n\n  useSignalEffect(() => {\n    const data = workerEvent.value;\n    if (data && data.uuid === currentUuid.peek()) {\n      state.value = data.value as Return;\n    }\n  });\n\n  useDeepCompareEffect(() => {\n    const uuid = crypto.randomUUID();\n    currentUuid.value = uuid;\n\n    worker?.postMessage({\n      type: \"subscribe\",\n      uuid,\n      selector: { selector: selector.name, params },\n    });\n\n    return () => {\n      worker?.postMessage({ type: \"unsubscribe\", uuid });\n    };\n  }, [selector, params]);\n\n  return state;\n}\n\nexport { useWorkerSelector, initializeWorkerStoreListener, dispatch };\n","import { ToolkitStore } from \"@reduxjs/toolkit/dist/configureStore\";\nimport {\n  BaseSelector,\n  MessageType,\n  RootState,\n  SelectorFunction,\n  WorkerSelector,\n} from \"./types\";\n\nlet selectors: Record<string, WorkerSelector<SelectorFunction>> | undefined;\n\nconst listeners = new Map<string, BaseSelector>();\n\nfunction initializeWorkerStore(\n  store: ToolkitStore<RootState>,\n  s: Record<string, WorkerSelector<SelectorFunction>>\n) {\n  selectors = s;\n\n  addEventListener(\"message\", ({ data }: MessageEvent<MessageType>) => {\n    switch (data.type) {\n      case \"dispatch\":\n        store.dispatch(data.action);\n        break;\n      case \"subscribe\":\n        listeners.set(data.uuid, data.selector);\n        runSelector(data.selector, data.uuid);\n        break;\n      case \"unsubscribe\":\n        listeners.delete(data.uuid);\n        break;\n    }\n  });\n\n  store.subscribe(() => {\n    listeners.forEach(runSelector);\n  });\n\n  function runSelector(value: BaseSelector, key: string) {\n    const selector: SelectorFunction<unknown> | undefined =\n      selectors?.[value.selector]?.fn;\n    const params = value.params ?? [];\n    if (selector) {\n      const returnValue = selector(store.getState(), ...params);\n\n      postMessage({\n        uuid: key,\n        value: returnValue,\n      });\n    }\n  }\n}\n\nfunction createWorkerSelector<T>(name: string, selector: T): WorkerSelector<T> {\n  return {\n    name,\n    fn: selector,\n  };\n}\n\nexport { initializeWorkerStore, createWorkerSelector };\n"],"names":["worker","selectors","workerEvent","Signal","listeners","Map","name","selector","fn","action","_worker","postMessage","type","store","s","value","key","_selectors$value$sele","_selectors","params","_value$params","returnValue","getState","uuid","addEventListener","_ref","data","dispatch","set","runSelector","subscribe","forEach","w","defaultValue","currentUuid","useSignal","useSignalEffect","peek","state","useDeepCompareEffect","_worker2","crypto","randomUUID","_worker3"],"mappings":"mHAUIA,ECDAC,uDDEaC,EAAG,IAAUC,EAAAA,OAAiC,MCAzDC,EAAY,IAAIC,iCA0CtB,SAAiCC,EAAcC,GAC7C,MAAO,CACLD,KAAAA,EACAE,GAAID,EAER,mBDlCA,SAAkBE,GAChB,IAAAC,EAAA,OAAAA,EAAAV,IAAAU,EAAQC,YAAY,CAAEC,KAAM,WAAYH,OAAAA,GAC1C,gCCbA,SACEI,EACAC,GAuBA,WAAqBC,EAAqBC,aAClCT,EACK,SAATN,IAA2B,OAAlBgB,EAATC,EAAYH,EAAMR,gBAAT,EAATU,EAA6BT,GACnBW,SAAAC,EAAGL,EAAMI,UAAU,GAC/B,GAAIZ,EAAU,CACZ,IAAiBc,EAAGd,EAASM,WAAAA,EAAAA,CAAAA,EAAMS,mBAAeH,IAElDR,YAAY,CACVY,KAAMP,EACND,MAAOM,GAEV,CACH,CAjCApB,EAAYa,EAEZU,iBAAiB,UAAW,SAAAC,OAAOC,EAAAD,EAAJC,KAC7B,OAAQA,EAAKd,MACX,IAAK,WACHC,EAAMc,SAASD,EAAKjB,QACpB,MACF,IAAK,YACHL,EAAUwB,IAAIF,EAAKH,KAAMG,EAAKnB,UAC9BsB,EAAYH,EAAKnB,SAAUmB,EAAKH,MAChC,MACF,IAAK,cACHnB,SAAiBsB,EAAKH,MAG5B,GAEAV,EAAMiB,UAAU,WACd1B,EAAU2B,QAAQF,EACpB,EAeF,wCDtCA,SAAuCG,GACrChC,EAASgC,EAETA,EAAER,iBACA,UACA,SAAoDC,GAClDvB,EAAYa,MADPU,EAAJC,IAEH,EAEJ,4BAiCA,SAIEnB,EACAY,EACAc,GAEA,IAAMC,EAAcC,EAASA,UAAC,MAChBA,EAASA,UAACF,GAwBxB,OAtBAG,EAAAA,gBAAgB,WACd,IAAMV,EAAOxB,EAAYa,MACrBW,GAAQA,EAAKH,OAASW,EAAYG,SACpCC,EAAMvB,MAAQW,EAAKX,MAEvB,GAEAwB,EAAoB,QAAC,WAAK,IAAAC,EAClBjB,EAAOkB,OAAOC,aASpB,OARAR,EAAYnB,MAAQQ,EAEpB,OAAAvB,EAAAA,IAAAwC,EAAQ7B,YAAY,CAClBC,KAAM,YACNW,KAAAA,EACAhB,SAAU,CAAEA,SAAUA,EAASD,KAAMa,OAAAA,KAGhC,WACL,IAAAwB,EAAM,OAANA,EAAA3C,IAAA2C,EAAQhC,YAAY,CAAEC,KAAM,cAAeW,KAAAA,GAC7C,CACF,EAAG,CAAChB,EAAUY,IAEPmB,CACT"}